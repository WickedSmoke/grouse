#!/usr/bin/boron -s
; DynParamsDialog Code Generator.

buf: read/text %qtachart_functions.cpp
parse buf [thru "-ChartParam-" data: to "*/" :data]
data: to-block data
;probe data

out: make string! 16000
emit: func [data] [
    if block? data [data: rejoin data]
    append out data
]

generate: func [gen file] [
    clear out
    gen/prelude
    parse data [some[
        tok: set-word! some [word!/string! skip] :tok (
            gen/header first ++ tok
            foreach [label value] tok [gen/param label value]
            gen/footer
        )
    ]]
    gen/fin
    ;print out
    write file out
]

label-filter: ['-' ' '  "_percent_" '%']

dialogs: context [
    prelude: does [
        emit {{
            // Code generated by gen-param.b from qtachart_functions.cpp

            static void _connectPDialog(DynParamsDialog* dlg,QObject* dest)
            {
              dlg->setObjectName(QStringLiteral("ParamDialog"));
              dlg->setColorDialog(new appColorDialog);

              dest->connect(dlg->buttonBox, SIGNAL(accepted()),
                            SLOT(function_accepted()));
              dest->connect(dlg->buttonBox, SIGNAL(rejected()),
                            SLOT(function_rejected()));
            }

        }}
    ]
    fin: none
    header: func [name] [
        name: to-string to-word name
        str:   construct name label-filter
        cname: construct name ['-' none]
        emit construct {{
          static DynParamsDialog*
          _paramDialog$CNAME(const ButtonInitData& bd)
          {
            QPushButton* btn = _addButton(bd, QStringLiteral("$STR"));
            bd.parent->connect(btn, SIGNAL(clicked()), SLOT(button_clicked()));
            DynParamsDialog* dlg = new DynParamsDialog(QStringLiteral(""), btn);
        }}
        ["$CNAME" cname  "$STR" str]
    ]
    footer: does [
        emit "  _connectPDialog(dlg, bd.parent);^/  return dlg;^/}^/^/"
    ]
    param: func [label value] [
        switch type? value [
            int!    [dt: "DPT_INT"]
            double! [dt: "DPT_REAL"]
            coord!  [dt: "DPT_COLOR" value: rejoin ["qRgb(" value ')']]
        ]
        label: replace/all to-string label '-' ' '
        emit [
            {  dlg->addParam(QStringLiteral("} label {"), QStringLiteral("}
            label {"),^/                } dt ", " value {);^/}
        ]
    ]
]

params: context [
    prelude: does [
        emit {{
            // Code generated by gen-param.b from qtachart_functions.cpp

            static void _objectParameters(QTACObject* obj, ParamVector& pvec)
            {
              QString name( obj->objectName() );
        }}
    ]
    fin: does [
        emit "}^/"
    ]
    header: func [name] [
        name: to-string to-word name
        str:  construct name label-filter
        emit [
            {  if( name == QStringLiteral("} str {") )^/  ^{^/}
        ]
    ]
    footer: does [
        emit "    return;^/  }^/"
    ]
    param: func [label value] [
        switch type? value [
            int!    [dt: "DPT_INT"]
            double! [dt: "DPT_REAL"]
            coord!  [dt: "DPT_COLOR" value: rejoin ["qRgb(" value ')']]
        ]
        label: replace/all to-string label '-' ' '
        emit [
            {    addParameter(pvec, QStringLiteral("} label {"),^/}
            {                 } dt
            {, obj->paramValue(QStringLiteral("} label {")) );^/}
        ]
    ]
]

generate dialogs %FuncParamDialogs.cpp
generate params  %ObjectParameters.cpp
